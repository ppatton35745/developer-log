// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using developer_log_API.Data;

namespace developerlogAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181026142204_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("developer_log_API.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ResourceTypeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ResourceId");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceAttribute", b =>
                {
                    b.Property<int>("ResourceAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ResourceAttributeId");

                    b.ToTable("ResourceAttribute");
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceAttributeValue", b =>
                {
                    b.Property<int>("ResourceAttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResourceId");

                    b.Property<int>("ResourceTypeAttributeId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ResourceAttributeValueId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("ResourceTypeAttributeId");

                    b.ToTable("ResourceAttributeValue");
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceTopic", b =>
                {
                    b.Property<int>("ResourceTopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResourceId");

                    b.Property<int>("TopicId");

                    b.HasKey("ResourceTopicId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TopicId");

                    b.ToTable("ResourceTopic");
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceType");
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceTypeAttribute", b =>
                {
                    b.Property<int>("ResourceTypeAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResourceAttributeId");

                    b.Property<int>("ResourceTypeId");

                    b.HasKey("ResourceTypeAttributeId");

                    b.HasIndex("ResourceAttributeId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ResourceTypeAttribute");
                });

            modelBuilder.Entity("developer_log_API.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("developer_log_API.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new { Id = "a3b7f423-9bff-4bf4-a397-d332e60d52bb", AccessFailedCount = 0, ConcurrencyStamp = "fdd42e26-28c5-4ef7-a1aa-05c1c58c398f", Email = "phil@phil.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "PHIL@PHIL.COM", NormalizedUserName = "PHIL@PHIL.COM", PasswordHash = "AQAAAAEAACcQAAAAEO63/cBG3AVpUh2/XGXk5I9znM2/Z0CCtTwDtHmGqPDGD+SIcrDm9XN4evP+g6e84A==", PhoneNumberConfirmed = false, SecurityStamp = "25a1f47a-7dca-41e8-b32f-0e07c50dc4e7", TwoFactorEnabled = false, UserName = "phil@phil.com", FirstName = "Phil", LastName = "Patton" }
                    );
                });

            modelBuilder.Entity("developer_log_API.Models.Resource", b =>
                {
                    b.HasOne("developer_log_API.Models.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("developer_log_API.Models.User", "User")
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceAttributeValue", b =>
                {
                    b.HasOne("developer_log_API.Models.Resource", "Resource")
                        .WithMany("ResourceAttributeValues")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("developer_log_API.Models.ResourceTypeAttribute", "ResourceTypeAttribute")
                        .WithMany("ResourceAttributeValues")
                        .HasForeignKey("ResourceTypeAttributeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceTopic", b =>
                {
                    b.HasOne("developer_log_API.Models.Resource", "Resource")
                        .WithMany("ResourceTopics")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("developer_log_API.Models.Topic", "Topic")
                        .WithMany("ResourceTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("developer_log_API.Models.ResourceTypeAttribute", b =>
                {
                    b.HasOne("developer_log_API.Models.ResourceAttribute", "ResourceAttribute")
                        .WithMany("ResourceTypeAttributes")
                        .HasForeignKey("ResourceAttributeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("developer_log_API.Models.ResourceType", "ResourceType")
                        .WithMany("ResourceTypeAttributes")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("developer_log_API.Models.Topic", b =>
                {
                    b.HasOne("developer_log_API.Models.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
